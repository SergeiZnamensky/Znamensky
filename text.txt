Операторы Turbo Pascal.
Операторы языка описывают некоторые алгоритмические действия, которые необходимо выполнить для решения задачи.
Тело программы можно представить как последовательность таких операторов. Идущие друг за другом операторы программы разделяются точкой с запятой.
Приоритет операторов
Операторы           Приоритет      Категория
@ Not                       Высший         Унарные операторы
* / Div Mod Shl
Shr                            Второй            Операторы умножения
+ - Or Xor                Третий            Операторы сложения
= <> <> <>= In        Низший         Операторы сравнения

Правила приоритета:
    1. Операнд между двумя операторами различного старшинства связан с оператором более высокого старшинства.
    2. Операнд между двумя операторами одного старшинства связан с левым из них.
    3. Выражения внутри круглых скобок оцениваются перед обработкой как одиночный операнд.
Операции с равным старшинством обычно выполняются слева направо, хотя компилятор может реорганизовать операнды, чтобы генерировать более оптимальный код.
“ := “

1.Присваивание переменной значение выражения.
Объявление
Переменная := выражение
Замечания
Тип переменной должен быть совместим с типом присваиваемого выражения.
Пример
X := Y;
Done := I > 0) And ( I < 100)
A[I] := A[I] + 1;
       
2.Begin … End
Эта конструкция является составным оператором. Зарезервированные слова Begin и End служат операторными скобками.
Объявление
Begin
Оператор;
Оператор;
...
Оператор
End;
Замечания
Когда несколько операторов записаны в таких операторных скобках, они обрабатываются как один оператор.
Пример
{ Составной оператор, используемый внутри оператора if }
 If First < Last Then
 Begin
  Temp := First;
  First := Last;
  Last := Temp;
 End;

3.Case..Of..Else..End
Оператор Case состоит из выражения (селектора) и списка операторов, каждый из которых выполнится в определенном случае.
Объявление
Case выражение Of
  вариант : оператор;
  ...
  вариант : оператор;
End

или

Case выражение Of
  вариант : оператор;
  ...
  вариант : оператор;
Else оператор
End
Замечания
"Вариант" состоит из одной или большего количества констант или диапазонов,разделенных запятыми. Часть "Else" является необязательной.
Пример
 Case Ch Of
   'A'..'Z', 'a'..'z' : WriteLn('Буква');
   '0'..'9'           : WriteLn('Цифра');
   '+', '-', '*', '/' : WriteLn('Оператор');
 Else WriteLn('Специальный символ')
 End;
 
 4.For..To / Downto..Do
Оператор For вызывает оператор, находящийся после слова Do, по одному разу для каждого значения в диапазоне от начального до конечного значений.
Объявление
For переменная:=начальное To конечное Do оператор
   или
For переменная:=начальное DownTo конечное Do оператор
Замечания
Переменная цикла и начальное и конечное значения должны иметь порядковый тип. Используйте составной оператор (Begin..End), чтобы выполнить в цикле несколько операторов.
To:
Со словом To, значение переменной цикла увеличивается на 1 при каждой итерации цикла.
DownTo:
Со словом DownTo, значение переменной цикла уменьшено на 1 при каждой итерации цикла.
Пример
 (* For...To, For...DownTo *)
 For I:=1 To ParamCount Do WriteLn(ParamStr(I);
 
 For I:=1 To 10 Do
 For J:=1 To 10 Do
  Begin
   X:=0;
   For K:=1 To 10 Do X:=X+Mat1[I, K]*Mat2[K, J];
   Mat[I, J]:=X;
  End;

5.Goto
Оператор Goto переходит при выполнении программы к определенному оператору программы, перед которым находится метка.
Объявление
Goto Label
Замечания
Метка должна находиться в том же самом блоке, что и оператор Goto. Нельзя перейти из одной процедуры или функции в другую.
Учтите!: Cамо понятие структурного программирования и общепринятый стиль программирования на структурных языках НЕ ПРИВЕТСТВУЕТ применение меток и операторов перехода в программах. Это затрудняет понимание программы как автором, так и потребителями, кроме того, применение меток отрицательно сказывается на эффективности генерируемого кода.
Пример
Label 1, 2;
Goto 1
   .
   .
   .
1 : WriteLn('Ненормальное завершение');
2 : WriteLn('Нормальное завершение');

6.If..Then..Else
Конструкция If...Then...Else определяет условия, при которых будет выполнен оператор.
Объявление
If выражение Then оператор
или
If выражение Then оператор Else оператор
Замечания
Если булево выражение после слова If истинно, то оператор, следующий за словом Then будет выполнен. В противном случае, если присутствует часть Else, то будет выполнен оператор, следующий за словом Else.
Пример
 (* Операторы If *)
 
 If (I<Min) Or (I>Max) Then I:=0;
 
 If ParamCount<>2 Then
  Begin
   WriteLn('Неверные параметры командной строки');
   Halt(1);
  End
 Else
  Begin
   ReadFile(ParamStr(1));
   WriteFile(ParamStr(2));
  End;

7.Вызов процедуры
Процедура - это часть программы, в которой выполняется специфическое действие, обычно основанное на наборе параметров.
Объявление
Procedure идентификатор;
  или
Procedure идентификатор (параметры);
Замечания
В заголовке процедуры определяются ее идентификатор и набор формальных параметров (если таковые есть).
Процедура вызывается с помощью процедурного оператора.
Заголовок процедуры сопровождается:
•	разделом описаний, в котором объявляются локальные объекты;
•	операторами, находящимися между Begin и End, которые определяют, что должно быть выполнено при вызове процедуры.
Вы можете использовать директиву Interrupt, чтобы объявить процедуру обработки прерываний. Вместо частей объявлений и операторов, в объявлении процедуры могут присутствовать директивы Forward, external или InLine.
Пример
 { Объявление процедуры }
 
 Procedure WrStr (X, Y : Integer; S : String);
 Var SaveX, SaveY : Integer;
 Begin
  SaveX:=WhereX;
  SaveY:=WhereY;
  GotoXY(X, Y);
  Write(S);
  GotoXY(SaveX, SaveY);
 End;

 8.Repeat..Until
Операторы между словами Repeat и Until повторяются до тех пор, пока булево выражение является Истинным (True).
Объявление
Repeat
  Оператор;
  Оператор;
  ...
  Оператор
Until выражение
Замечания
Последовательность операторов выполнится по крайней мере один раз!
Пример
{ Операторы цикла Repeat }
 Repeat
  Ch:=GetChar
 Until Ch<>' ';
 
 Repeat
  Write('Введите значение : ');
  ReadLn(I);
 Until (I>=0) And (I<=9);

9.While..Do
Оператор цикла While содержит выражение, которое управляет повторением выполнения отдельного или составного оператора.
Объявление
While выражение Do оператор
Замечания
Оператор после Do будет выполняться до тех пор, пока булево выражение является истинным (True).
Выражение оценивается до выполнения оператора, так что если булево выражение с самого начала было ложным (False), то оператор не будет выполнен ни разу. (В отличие от оператора цикла Repeat)
Пример
 { Операторы While }
  While Ch = ' ' Do Ch:=GetChar;
 
  While Not EOF(InFile) Do
  Begin
   ReadLn(InFile, Line);
   WriteLn(OutFile, Line);
   Inc(LineCount);
  End;

10.With..Do
Оператор With - метод ускорения доступа к полям записи.
Объявление
With переменная,
переменная, ...переменная Do оператор
Замечания
В операторе, следующем после слова Do, к полям одной или большего количества переменных типа записи можно обращаться, используя только их идентификаторы(без указания имени переменной записи).
Пример
{ Операторы With }
 
With Date[I] Do
Begin
   Month:=1;
   Year:=Year+1;
End;
 
{Это эквивалентно:}
Date[I].Month:=1;
Date[I].Year:=Date[I].Year+1;

11.Inline "..."
Встроенные операторы и директивы позволяют вам вставлять команды машинного кода непосредственно в код программы или модуля.
Объявление
InLine (команда/команда/.../команда)
Замечания
Когда используется как оператор, встроенные команды вставляются непосредственно в генерируемый код.
Когда используется как директива при объявлении процедуры или функции, встроенные команды вставляются в генерируемый код, каждый раз при вызове процедуры или функции.
Встроенная команда состоит из идентификатора константы или переменной, необязательно предваренных указателем размера "<" или ">".
Идентификатор переменной может сопровождаться знаком + (плюс) или - (минус) и константой, для определения смещения от адреса переменной.
Встроенная команда генерирует 1 байт кода, если это константа в диапазоне от 0 до 255; иначе она генерирует слово (2 байта).
Вы можете использовать операторы "<" и ">", для отмены автоматического выбора размера:
    • < - всегда генерирует байт,
    • > - всегда генерирует слово.
Пример
 (* Встроенный оператор *)
 Procedure FillWord(Var Dest; Count : Word; Data : Word);
 Begin
  Inline(
   $C4/$7E/<Dest/    (* les   di, Dest[bp] *)
   $8B/$4E/<Count/   (* mov   cx, Count[bp]*)
   $8B/$46/<Data/    (* mov   ax, Data[bp] *)
   $FC/              (* cld                *)
   $F3/$AB);         (* rep   stosw        *)
 End;

12.Бинарные арифметические операторы
  Оператор  Операция  Тип операндов  Тип результат
            +          Сложение         Integer, Real          Integer, Real
             -           Вычитание       Integer, Real          Integer, Real
            *           Умножение       Integer, Real          Integer, Real
            /            Деление           Integer, Real           Real, Real
          Div         Деление            Integer, Real           Integer, Real
                         нацело
         Mod        Остаток            Integer               Integer
Замечания
Оператор "+" также используется как строковый оператор или оператор множеств.
Операторы "-", и "*" также используются как операторы множеств.

13.Унарные арифметические операторы
Оператор     Операция   Тип операндов   Тип результа
+                Подтверждение  Integer, Real     Integer, Real
                             знака
-                   Смена знака        Integer, Real     Integer, Real
Замечания
Любой операнд с типом поддиапазона или порядковым, обрабатывается, как будто он имеет перечислимый тип.
Если оба операнда операций +, -, *, Div или Mod имеют тип Integer, то результат имеет общий тип двух операндов. Если один или оба операнда операций +, - или * имеют тип Real, то результат имеет тип Real в режиме {$N-} или Extended в режиме {$N+}.
Если операнд операторов + или - имеет целочисленный тип, то результат тоже имеет целочисленный тип. Если операнд имеет тип Real, то результат имеет тип Real или Extended.
Значение X/Y всегда имеет тип Real или Extended независимо от типов операндов. Если значение Y равно нулю, то происходит ошибка деления на нуль. Значение I Div J - математическое частное от I / J, округленное до значения целочисленного типа. Если значение J равно нулю, то происходит ошибка деления на нуль.
Оператор Mod возвращает остаток, полученный от деления двух операндов:
I Mod J = I - (I Div J) * J
Знак результата Mod - такой же, как и знак I. Если значение J равно нулю, то происходит ошибка деления на нуль.

14.Булевы операторы
Оператор    Операция   Тип операндов    Тип результата
       Not         Отрицание              Boolean                 Boolean
       And    Логическое И            Boolean                 Boolean
        Or     Логическое ИЛИ      Boolean                 Boolean
       Xor       Логическое                Boolean                 Boolean
                     исключающие
           ИЛИ

Оператор Not - унарный.

15.Логические операторы
Оператор                   Операция              Тип операндов    Тип результата
    Not              Побитовое отрицание            Integer                 Integer
    And                    Побитовое И                       Integer                 Integer
     Or                    Побитовое ИЛИ                   Integer                 Integer
    Xor      Побитовое исключающие ИЛИ    Integer                 Integer
    Shl                         Сдвиг влево                     Integer                 Integer
    Shr                       Сдвиг вправо                    Integer                 Integer

Замечания
Оператор Not - унарный.
Если операнд оператора Not имеет тип Integer, то результат имеет тот же самый целочисленный тип. Если оба операнда операторов And, Or, Xor имеют целочисленный тип, то результат имеет общий тип двух операндов.
Операции I Shl J и I Shr J сдвигают значение I влево или вправо на J бит. Тип результата - такой же как и тип выражения I.

16. PChar операторы
Расширенный синтаксис (включаемый директивой {$X+}) поддерживает ряд новых операций с символьными указателями.
Операторы плюс (+) и минус (-) могут использоваться для увеличения и уменьшения значения смещения указателя. Оператор минус (-) может использоваться для вычисления расстояния между значениями смещений двух символьных указателей.
Замечания
Пусть P и Q являются значениями типа PChar, а I - значение типа Word, тогда допустимы следующие конструкции:
Конструкция                             Результат
P + I              Добавление I к значению смещения P
I + P              Добавление I к значению смещения P
P – I               Вычитание I из значения смещения P
P – Q      Вычитание значения смещения Q из значения смещения P

P + I, I + P: Операции P + I и I + P добавляют значение I к адресу, заданному указателем P, с созданием указателя, который указывает на I-й символ после P.

17.Операторы сравнения
Оператор  Операция   Тип результата             Тип операндов
    =              Равно              Boolean      Совместимые простые, указатели, наборы,
                                                                   строки или упакованные строковые типы 
   <>          Не равно           Boolean      Совместимые простые, указатели, наборы,
                                                                   строки или упакованные строковые типы
    <           Меньше чем    Boolean       Совместимые простые, строки, упакованные 
                                                                    строковые типы или PChar
>           Больше чем      Boolean       Совместимые простые, строки, упакованные
                                                                строковые типы или PChar
   <=          Меньше или     Boolean       Совместимые простые, строки, равно
                                                                     упакованные строковые типы или PChar
   >=          Больше или       Boolean       Совместимые простые, строки, равно
                                                                     упакованные строковые типы или PChar
   <=         Подмножество  Boolean       Совместимые типы наборов
   >=         Надмножество  Boolean        Совместимые типы наборов
   In             Элемент            Boolean       Левый операнд: любой перечислимый тип Т; 
                                                                      правый операнд: набор с типом, 
                                                                       совместимыи с типом Т
																	   
18. Операторы множеств
Оператор     Операция          Тип операндов
      +            Объединение   Совместимые типы наборов
      -                Различие        Совместимые типы наборов
      *            Пересечение     Совместимые типы наборов

Замечания
Результаты операций с наборами соответствуют правилам логики наборов:
* Порядковое значение C находится в наборе A + B только в том случае, если C находится в A или B.
* Порядковое значение C находится в наборе A - B только в том случае, если C находится в A и не находится в B.
* Порядковое значение C находится в наборе A * B только в том случае, если C находится и в A, и в B.
Если самое маленькое порядковое значение, являющееся элементом результата операции с набором есть A, а самое большое есть B, то тип результата становится равным A..B.

19. Строковые операторы
Оператор      Операция           Тип операндов                Тип результата
       +       КонкатенацияString Char или упакованный   StringString

Замечания
Turbo Pascal позволяет вам использовать оператор +, для конкатенации двух строк. Результат совместим с любым типом String (но не с типом Char или упакованными строковыми типами). Если возникающая в результате строка длиннее, чем 255

20. Оператор @
Оператор      Операция           Тип операндов                Тип результата
   @             Взятие адреса     Ссылка на переменную      Pointer (как и NIL)
                                                   идентификатор функции
                                                        или процедуры


Замечания
"@" является унарным оператором. При использовании оператора "@" с процедурными переменными применяются специальные правила.
Тип результата такой же, как и у NIL, так что этот оператор может применяться для любых типов указателей.
																	   